syntax = "proto3";

package xlsoa.core;

enum ManagerResult {
    OK                = 0;
    ERR_PARAMS        = 100;
    ERR_CONFLICT      = 101;
    ERR_NOT_EXISTS    = 102;
    ERR_INTERNAL      = 200;
}

service manager {

    rpc ServiceCreate(ServiceCreateRequest)           returns (ServiceCreateResponse)       {}  //创建Service
    rpc ServiceGet(ServiceGetRequest)                 returns (ServiceGetResponse)          {}  //获取Service信息
    rpc ServiceGetByName(ServiceGetByNameRequest)     returns (ServiceGetByNameResponse)    {}  //获取Service信息
    rpc ServiceGetList(ServiceGetListRequest)         returns (ServiceGetListResponse)    {}  //获取Service信息

    rpc ClientIdCreate(ClientIdCreateRequest)         returns (ClientIdCreateResponse)      {}  //创建ClientId
    rpc ClientIdDelete(ClientIdDeleteRequest)         returns (ClientIdDeleteResponse)      {}  //删除ClientId
    rpc ClientIdGet(ClientIdGetRequest)               returns (ClientIdGetResponse)         {}  //获取ClientId
    rpc ClientIdGetList(ClientIdGetListRequest)       returns (ClientIdGetListResponse)     {}  //获取ClientId列表

    rpc ScopeCreate(ScopeCreateRequest)               returns (ScopeCreateResponse)         {}  //创建Scope
    rpc ScopeDelete(ScopeDeleteRequest)               returns (ScopeDeleteResponse)         {}  //删除Scope
    rpc ScopeGetList(ScopeGetListRequest)             returns (ScopeGetListResponse)        {}  //获取Scope列表

    rpc Grant(GrantRequest)                           returns (GrantResponse)               {}  //授权
    rpc GrantCancel(GrantCancelRequest)               returns (GrantCancelResponse)         {}  //取消授权
    rpc GrantGetList(GrantGetListRequest)             returns (GrantGetListResponse)        {}  //获取授权列表
    rpc GrantToList(GrantToListRequest)               returns (GrantToListResponse)         {}  //获取服务授权给谁的列表

}

message ServiceCreateRequest {
    Service service = 1; //要创建的Service信息，只用提供name即可
}
message ServiceCreateResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    Service service = 3; //创建成功返回的Service信息
}

message ServiceGetRequest {
    string service_id = 1; 
}
message ServiceGetResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    Service service = 3;
}

message ServiceGetByNameRequest {
    string name = 1; 
}
message ServiceGetByNameResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    Service service = 3;
}

message ServiceGetListRequest {
}
message ServiceGetListResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    repeated Service services = 3;
}

message ClientIdCreateRequest {
    string service_id = 1;
}
message ClientIdCreateResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    ClientId client_id = 3; //创建成功返回的ClientId，ClientId.Id为全局唯一
}

message ClientIdGetRequest {
    string client_id = 1;
}
message ClientIdGetResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    ClientId client_id = 3;
}

message ClientIdGetListRequest {
    string service_id = 1;
}
message ClientIdGetListResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    repeated ClientId client_ids = 3;
}

message ClientIdDeleteRequest {
    string client_id  = 1; //ClientId
}
message ClientIdDeleteResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
}

message ScopeCreateRequest {
    string service_id = 1; //ServiceId
    string scope_name = 2; //用路径表示的Scope名字空间，例如/get
}
message ScopeCreateResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    Scope   scope   = 3; //创建成功后的Scope信息，返回的ScopeName会加上ServiceName作为前缀，全局唯一。例如/serviceA/user/get
}

message ScopeDeleteRequest {
    string service_id = 1; //ServiceId
    string scope_name = 2; //ScopeName
}
message ScopeDeleteResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
}

message ScopeGetListRequest {
    string service_id = 1;
}
message ScopeGetListResponse {
    ManagerResult  result        = 1; //0成功，!0失败
    string  message       = 2; //失败信息
    repeated Scope scopes = 3;
}

message GrantRequest {
    string service_id             = 1; //申请授权的ServiceId
    string scope_name             = 2; //例如/serviceA/api1，授权serviceA的api1访问。/serviceA/，授权serviceA的所有访问
}
message GrantResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
}

message GrantCancelRequest {
    string service_id             = 1; //取消授权的ServiceId
    string scope_name             = 2; //ScopeName
}
message GrantCancelResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
}

message GrantGetListRequest {
    string service_id = 1;
}
message GrantGetListResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    repeated Scope scopes = 3;
}

message GrantToListRequest {
    string service_id = 1;
}
message GrantToListResponse {
    ManagerResult  result  = 1; //0成功，!0失败
    string  message = 2; //失败信息
    repeated Scope scopes = 3;
}

// struct
message Service {
    string id        = 1; //Service的唯一Id，注册的时候由系统统一分配
    string name      = 2; //全局唯一的服务名称，服务注册和服务发现使用这个名字。可以用gRPC协议生成的服务描述ServiceName。合法字符为[0-9a-zA-Z\.]
    int32  create_ts = 3; //创建时间
    int32  last_ts   = 4; //最近更新时间
}

message ClientId {
    string id           = 1; //全局唯一的Id，系统自动生成。和secret成对使用
    string secret       = 2; //私钥，跟Id成对使用
    string service_id   = 3; //所属service
    int32  create_ts    = 4; //创建时间
    int32  last_ts      = 5; //最近更新时间
}

message Scope {
    string name       = 1; //合法字符为[0-9a-zA-Z\/\.]。例如/serviceA/user/info, /serviceA/user/set
    string service_id = 2; //ServiceId
    int32  create_ts  = 3; //创建时间
    int32  last_ts    = 4; //最近更新时间
}
